Rencana Kerja Proyek: "SENTINEL" (todo.txt full)
Ini adalah roadmap lengkap untuk membangun SENTINEL dari prototipe dasar hingga menjadi tool open-source yang solid.

FASE 1: THE CORE ENGINE (Target: Komit Pertama / Akhir Pekan)
(Tujuan: Membuat "detektif" dasar yang bisa memeriksa daftar target dan melaporkan hasilnya.)

[✓] Milestone 1.1: Setup & Konfigurasi

[✓] Inisialisasi proyek Go baru (go mod init).

[✓] Tambahkan dependensi dasar: yaml.v3 (untuk baca config).

[✓] Buat struktur file sentinel.yaml sederhana (hanya daftar services dengan name dan url).

[✓] Implementasikan logika untuk membaca dan mem-parsing sentinel.yaml.

[✓] Milestone 1.2: Logika Pengecekan Dasar

[✓] Buat fungsi check_service yang menerima satu URL.

[✓] Di dalam fungsi, kirim HTTP GET request dengan timeout yang wajar (misal: 5 detik).

[✓] Tentukan status "UP" (jika status code 2xx-3xx) atau "DOWN" (selain itu atau error).

[✓] Ukur waktu respons (response time).

[✓] Milestone 1.3: Loop & Laporan Sederhana

[✓] Buat loop utama di main.go yang mengiterasi setiap service dari config.

[✓] Panggil check_service untuk setiap service.

[✓] Print hasilnya ke konsol dengan format yang jelas (misal: [UP] Google - 120ms).

[✓] Bungkus loop utama dalam time.Ticker agar berjalan otomatis setiap menit.

FASE 2: MAKING IT "PINTAR" (Target: Minggu 1-2)
(Tujuan: Menambahkan konkurensi agar efisien dan membuat tool lebih fleksibel.)

[✓] Milestone 2.1: Implementasi Konkurensi

[✓] Refaktor loop utama. Untuk setiap service, jalankan check_service di dalam goroutine terpisah.

[✓] Gunakan channel untuk mengumpulkan hasil pengecekan dari semua goroutine.

[✓] Tunggu sampai semua hasil terkumpul, baru print laporannya.

Definisi "Menang": SENTINEL bisa mengecek 20 website dalam waktu yang hampir sama dengan mengecek 1 website.

[✓] Milestone 2.2: Konfigurasi & CLI yang Lebih Baik

[✓] Tambahkan library CLI (misal: cobra atau urfave/cli) untuk membuat perintah yang lebih rapi (sentinel run, sentinel validate).

[✓] Tambahkan opsi konfigurasi baru di sentinel.yaml, seperti check_interval (misal: "30s") dan timeout per service.

FASE 3: ADVANCED FEATURES (Target: Minggu 3-4)
(Tujuan: Menambahkan fitur yang membuatnya setara dengan tool profesional.)

[✓] Milestone 3.1: Sistem Notifikasi

[✓] Tambahkan bagian notifications di sentinel.yaml (misal: untuk URL webhook Discord/Slack).

[✓] Implementasikan logika untuk menyimpan status terakhir dari setiap service.

[✓] Jika status berubah (dari UP -> DOWN atau sebaliknya), kirim notifikasi ke webhook yang dikonfigurasi.

[✓] Milestone 3.2: Tipe Pengecekan Lanjutan

[✓] Tambahkan dukungan di sentinel.yaml untuk tipe pengecekan selain GET.

[✓] Implementasikan pengecekan TCP Port (misal: untuk mengecek apakah port database terbuka).

[✓] Implementasikan pengecekan konten (expect_string), untuk memastikan sebuah kata kunci ada di dalam respons HTML.

FASE 4: OPEN SOURCE READINESS (Jangka Panjang)
(Tujuan: Mempersiapkan proyek untuk dipamerkan dan dikontribusikan.)

[ ] Milestone 4.1: Dokumentasi & Pengujian

[ ] Tulis README.md yang komprehensif.

[ ] Buat unit test untuk logika pengecekan dan parsing config.

[ ] Buat CONTRIBUTING.md.

[ ] Milestone 4.2: CI/CD & Rilis

[ ] Buat workflow GitHub Actions untuk menjalankan tes secara otomatis.

[ ] Buat workflow rilis yang meng-compile binary untuk Windows, macOS, dan Linux.